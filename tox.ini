[tox]
envlist = pep8
minversion = 2.3
skipsdist = True

[testenv]
install_command = pip install -U {opts} {packages}
setenv = VIRTUAL_ENV={envdir}
         OS_STDOUT_CAPTURE=1
         OS_STDERR_CAPTURE=1
         OS_TEST_TIMEOUT=60
deps = -r{toxinidir}/test-requirements.txt

[testenv:linters]
basepython = python3
whitelist_externals = bash
commands =
  bash -c "find {toxinidir}          \
         -not \( -type d -name .?\* -prune \) \
         -type f                              \
         -not -name \*~                       \
         -not -name \*.md                     \
         -name \*.sh                          \
         -print0 | xargs --no-run-if-empty -0 bashate -v"
  bash -c "find {toxinidir}        \
            -o \( -name .tox -prune \)         \
            -o -type f -name '*.yaml'       \
            -print0 | xargs --no-run-if-empty -0 yamllint"

[pep8]
# Ignoring these warnings
# E501 line too long

ignore = E501,E129

[flake8]
# H102 Apache 2.0 license header not found
# B301 Python 3 does not include `.iter*` methods on dictionaries.
# B005 Using .strip() with multi-character strings is misleading the reader.
ignore = H102, B301, B005
# H106 Donâ€™t put vim configuration in source files (off by default).
# H203 Use assertIs(Not)None to check for None (off by default).
# H904 Delay string interpolations at logging calls (off by default).
enable-extensions = H106,H203,H904

[testenv:pep8]
basepython = python3
usedevelop = False
skip_install = True
deps =
    hacking
    flake8-bugbear
    flake8<3.6.0
commands =
    flake8

[testenv:venv]
basepython = python3
commands = {posargs}

[testenv:docs]
basepython = python3
deps = -r{toxinidir}/doc/requirements.txt
commands =
    rm -rf doc/build
    sphinx-build -a -E -W -d doc/build/doctrees -b html doc/source doc/build/html
whitelist_externals = rm

[testenv:releasenotes]
basepython = python3
deps = -r{toxinidir}/doc/requirements.txt
commands =
    rm -rf releasenotes/build
    sphinx-build -a -E -W -d releasenotes/build/doctrees -b html releasenotes/source releasenotes/build/html
whitelist_externals =
    rm
    reno

[testenv:newnote]
basepython = python3
# Re-use the releasenotes venv
envdir = {toxworkdir}/releasenotes
deps = -r{toxinidir}/doc/requirements.txt
commands = reno new {posargs}
